{"$message_type":"diagnostic","message":"cannot find attribute `async_trait` in this scope","code":null,"level":"error","spans":[{"file_name":"src\\m20250223_210101_create_file_type.rs","byte_start":116,"byte_end":127,"line_start":7,"line_end":7,"column_start":3,"column_end":14,"is_primary":true,"text":[{"text":"#[async_trait]","highlight_start":3,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`async_trait` is imported here, but it is a crate, not an attribute","code":null,"level":"note","spans":[{"file_name":"src\\m20250223_210101_create_file_type.rs","byte_start":28,"byte_end":57,"line_start":2,"line_end":2,"column_start":5,"column_end":34,"is_primary":true,"text":[{"text":"use sea_orm_migration::prelude::*;","highlight_start":5,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider importing this attribute macro","code":null,"level":"help","spans":[{"file_name":"src\\m20250223_210101_create_file_type.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use sea_orm::Statement;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::async_trait::async_trait;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find attribute `async_trait` in this scope\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\m20250223_210101_create_file_type.rs:7:3\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[async_trait]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `async_trait` is imported here, but it is a crate, not an attribute\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\m20250223_210101_create_file_type.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse sea_orm_migration::prelude::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this attribute macro\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::async_trait::async_trait;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"implicit elided lifetime not allowed here","code":{"code":"E0726","explanation":"An argument lifetime was elided in an async function.\n\nErroneous code example:\n\nWhen a struct or a type is bound/declared with a lifetime it is important for\nthe Rust compiler to know, on usage, the lifespan of the type. When the\nlifetime is not explicitly mentioned and the Rust Compiler cannot determine\nthe lifetime of your type, the following error occurs.\n\n```compile_fail,E0726\nuse futures::executor::block_on;\nstruct Content<'a> {\n    title: &'a str,\n    body: &'a str,\n}\nasync fn create(content: Content) { // error: implicit elided\n                                    // lifetime not allowed here\n    println!(\"title: {}\", content.title);\n    println!(\"body: {}\", content.body);\n}\nlet content = Content { title: \"Rust\", body: \"is great!\" };\nlet future = create(content);\nblock_on(future);\n```\n\nSpecify desired lifetime of parameter `content` or indicate the anonymous\nlifetime like `content: Content<'_>`. The anonymous lifetime tells the Rust\ncompiler that `content` is only needed until the `create` function is done with\nits execution.\n\nThe `implicit elision` meaning the omission of suggested lifetime that is\n`pub async fn create<'a>(content: Content<'a>) {}` is not allowed here as\nlifetime of the `content` can differ from current context:\n\n```ignore (needs futures dependency)\nasync fn create(content: Content<'_>) { // ok!\n    println!(\"title: {}\", content.title);\n    println!(\"body: {}\", content.body);\n}\n```\n\nKnow more about lifetime elision in this [chapter][lifetime-elision] and a\nchapter on lifetimes can be found [here][lifetimes].\n\n[lifetime-elision]: https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\n[lifetimes]: https://doc.rust-lang.org/rust-by-example/scope/lifetime.html\n"},"level":"error","spans":[{"file_name":"src\\m20250223_210101_create_file_type.rs","byte_start":198,"byte_end":211,"line_start":9,"line_end":9,"column_start":34,"column_end":47,"is_primary":true,"text":[{"text":"    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {","highlight_start":34,"highlight_end":47}],"label":"expected lifetime parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"indicate the anonymous lifetime","code":null,"level":"help","spans":[{"file_name":"src\\m20250223_210101_create_file_type.rs","byte_start":211,"byte_end":211,"line_start":9,"line_end":9,"column_start":47,"column_end":47,"is_primary":true,"text":[{"text":"    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {","highlight_start":47,"highlight_end":47}],"label":null,"suggested_replacement":"<'_>","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0726]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: implicit elided lifetime not allowed here\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\m20250223_210101_create_file_type.rs:9:34\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected lifetime parameter\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: indicate the anonymous lifetime\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    async fn up(&self, manager: &SchemaManager\u001b[0m\u001b[0m\u001b[38;5;10m<'_>\u001b[0m\u001b[0m) -> Result<(), DbErr> {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"implicit elided lifetime not allowed here","code":{"code":"E0726","explanation":"An argument lifetime was elided in an async function.\n\nErroneous code example:\n\nWhen a struct or a type is bound/declared with a lifetime it is important for\nthe Rust compiler to know, on usage, the lifespan of the type. When the\nlifetime is not explicitly mentioned and the Rust Compiler cannot determine\nthe lifetime of your type, the following error occurs.\n\n```compile_fail,E0726\nuse futures::executor::block_on;\nstruct Content<'a> {\n    title: &'a str,\n    body: &'a str,\n}\nasync fn create(content: Content) { // error: implicit elided\n                                    // lifetime not allowed here\n    println!(\"title: {}\", content.title);\n    println!(\"body: {}\", content.body);\n}\nlet content = Content { title: \"Rust\", body: \"is great!\" };\nlet future = create(content);\nblock_on(future);\n```\n\nSpecify desired lifetime of parameter `content` or indicate the anonymous\nlifetime like `content: Content<'_>`. The anonymous lifetime tells the Rust\ncompiler that `content` is only needed until the `create` function is done with\nits execution.\n\nThe `implicit elision` meaning the omission of suggested lifetime that is\n`pub async fn create<'a>(content: Content<'a>) {}` is not allowed here as\nlifetime of the `content` can differ from current context:\n\n```ignore (needs futures dependency)\nasync fn create(content: Content<'_>) { // ok!\n    println!(\"title: {}\", content.title);\n    println!(\"body: {}\", content.body);\n}\n```\n\nKnow more about lifetime elision in this [chapter][lifetime-elision] and a\nchapter on lifetimes can be found [here][lifetimes].\n\n[lifetime-elision]: https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\n[lifetimes]: https://doc.rust-lang.org/rust-by-example/scope/lifetime.html\n"},"level":"error","spans":[{"file_name":"src\\m20250223_210101_create_file_type.rs","byte_start":1079,"byte_end":1092,"line_start":33,"line_end":33,"column_start":36,"column_end":49,"is_primary":true,"text":[{"text":"    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {","highlight_start":36,"highlight_end":49}],"label":"expected lifetime parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"indicate the anonymous lifetime","code":null,"level":"help","spans":[{"file_name":"src\\m20250223_210101_create_file_type.rs","byte_start":1092,"byte_end":1092,"line_start":33,"line_end":33,"column_start":49,"column_end":49,"is_primary":true,"text":[{"text":"    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {","highlight_start":49,"highlight_end":49}],"label":null,"suggested_replacement":"<'_>","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0726]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: implicit elided lifetime not allowed here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\m20250223_210101_create_file_type.rs:33:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected lifetime parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: indicate the anonymous lifetime\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    async fn down(&self, manager: &SchemaManager\u001b[0m\u001b[0m\u001b[38;5;10m<'_>\u001b[0m\u001b[0m) -> Result<(), DbErr> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[38;5;10m++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `sea_orm::Statement`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\m20250223_210101_create_file_type.rs","byte_start":4,"byte_end":22,"line_start":1,"line_end":1,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use sea_orm::Statement;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\m20250223_210101_create_file_type.rs","byte_start":0,"byte_end":24,"line_start":1,"line_end":2,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use sea_orm::Statement;","highlight_start":1,"highlight_end":24},{"text":"use sea_orm_migration::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `sea_orm::Statement`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\m20250223_210101_create_file_type.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse sea_orm::Statement;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"lifetime parameters or bounds on method `up` do not match the trait declaration","code":{"code":"E0195","explanation":"The lifetime parameters of the method do not match the trait declaration.\n\nErroneous code example:\n\n```compile_fail,E0195\ntrait Trait {\n    fn bar<'a,'b:'a>(x: &'a str, y: &'b str);\n}\n\nstruct Foo;\n\nimpl Trait for Foo {\n    fn bar<'a,'b>(x: &'a str, y: &'b str) {\n    // error: lifetime parameters or bounds on method `bar`\n    // do not match the trait declaration\n    }\n}\n```\n\nThe lifetime constraint `'b` for `bar()` implementation does not match the\ntrait declaration. Ensure lifetime declarations match exactly in both trait\ndeclaration and implementation. Example:\n\n```\ntrait Trait {\n    fn t<'a,'b:'a>(x: &'a str, y: &'b str);\n}\n\nstruct Foo;\n\nimpl Trait for Foo {\n    fn t<'a,'b:'a>(x: &'a str, y: &'b str) { // ok!\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src\\m20250223_210101_create_file_type.rs","byte_start":180,"byte_end":180,"line_start":9,"line_end":9,"column_start":16,"column_end":16,"is_primary":true,"text":[{"text":"    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {","highlight_start":16,"highlight_end":16}],"label":"lifetimes do not match method in trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0195]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: lifetime parameters or bounds on method `up` do not match the trait declaration\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\m20250223_210101_create_file_type.rs:9:16\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mlifetimes do not match method in trait\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"lifetime parameters or bounds on method `down` do not match the trait declaration","code":{"code":"E0195","explanation":"The lifetime parameters of the method do not match the trait declaration.\n\nErroneous code example:\n\n```compile_fail,E0195\ntrait Trait {\n    fn bar<'a,'b:'a>(x: &'a str, y: &'b str);\n}\n\nstruct Foo;\n\nimpl Trait for Foo {\n    fn bar<'a,'b>(x: &'a str, y: &'b str) {\n    // error: lifetime parameters or bounds on method `bar`\n    // do not match the trait declaration\n    }\n}\n```\n\nThe lifetime constraint `'b` for `bar()` implementation does not match the\ntrait declaration. Ensure lifetime declarations match exactly in both trait\ndeclaration and implementation. Example:\n\n```\ntrait Trait {\n    fn t<'a,'b:'a>(x: &'a str, y: &'b str);\n}\n\nstruct Foo;\n\nimpl Trait for Foo {\n    fn t<'a,'b:'a>(x: &'a str, y: &'b str) { // ok!\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src\\m20250223_210101_create_file_type.rs","byte_start":1061,"byte_end":1061,"line_start":33,"line_end":33,"column_start":18,"column_end":18,"is_primary":true,"text":[{"text":"    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {","highlight_start":18,"highlight_end":18}],"label":"lifetimes do not match method in trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0195]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: lifetime parameters or bounds on method `down` do not match the trait declaration\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\m20250223_210101_create_file_type.rs:33:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mlifetimes do not match method in trait\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 5 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 5 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0195, E0726.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0195, E0726.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0195`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0195`.\u001b[0m\n"}
